---

- name: '[Pre-Check] (ALL) Test PostgreSQL DB Access'
  command: psql -tAXc 'select 1'
  changed_when: false

- name: '[Pre-Check] Check the current version of PostgreSQL'
  command: psql -tAXc "select setting::integer/10000 from pg_settings where name = 'server_version_num'"
  register: server_version_num
  changed_when: false
  when:
    - inventory_hostname in groups['primary']

# Stop, if the current version does not match pg_old_version
- name: "Pre-Check error. An incorrect version of PostgreSQL may have been specified"
  fail:
    msg:
      - "The current version of PostgreSQL is {{ server_version_num.stdout }}"
      - "Make sure that you have specified the correct version in the pg_old_version variable."
  when:
    - inventory_hostname in groups['primary']
    - server_version_num.stdout is defined
    - server_version_num.stdout|int != pg_old_version|int

# Stop, if the current version greater than or equal to pg_new_version
- name: "Pre-Check error. An incorrect target version of PostgreSQL may have been specified"
  fail:
    msg:
      - "The current version of PostgreSQL is {{ server_version_num.stdout }}, no upgrade is needed."
      - "Or, make sure that you have specified the correct version in the pg_new_version variable."
  when:
    - server_version_num.stdout is defined
    - server_version_num.stdout|int >= pg_new_version|int

# This check is necessary to avoid the risk of deleting the current data directory
# the current directory must not be equal to the path specified in the pg_new_datadir variable
# which will later be cleaned up before executing initdb for a new version of PostgreSQL
- name: '[Pre-Check] Ensure new data directory is different from the current one'
  command: psql -tAXc "show data_directory"
  changed_when: false
  register: pg_current_datadir
  when:
    - inventory_hostname in groups['primary']

# Stop, if the current data directory is the same as pg_new_datadir
- name: "Pre-Check error. The current data directory is the same as new data directory"
  fail:
    msg:
      - "The new data directory ({{ pg_new_datadir }}) must be different from the current one ({{ pg_current_datadir.stdout | trim }})"
  when:
    - inventory_hostname in groups['primary']
    - pg_new_datadir == pg_current_datadir.stdout | trim

- name: '[Pre-Check] Make sure that physical replication is active'
  command: >-
    psql -tAXc "select count(*) from pg_stat_replication
    where application_name != 'pg_basebackup'"
  register: pg_replication_state
  changed_when: false
  when:
    - inventory_hostname in groups['primary']

# Stop, if there are no active replicas
- name: "Pre-Check error. Print physical replication state"
  fail:
    msg: "There are no active replica servers (pg_stat_replication returned 0 entries)."
  when:
    - inventory_hostname in groups['primary']
    - pg_replication_state.stdout | int == 0

- name: '[Pre-Check] Make sure there is no high replication lag (more than {{ max_replication_lag_bytes | human_readable }})'
  command: >-
    psql -tAXc "select pg_wal_lsn_diff(pg_current_wal_lsn(),
    replay_lsn) pg_lag_bytes from pg_stat_replication
    order by pg_lag_bytes desc limit 1"
  register: pg_lag_bytes
  changed_when: false
  failed_when: false
  until: pg_lag_bytes.stdout|int < max_replication_lag_bytes|int
  retries: 30
  delay: 5
  when:
    - inventory_hostname in groups['primary']

# Stop, if replication lag is high
- block:
    - name: "Print replication lag"
      debug:
        msg: "Current replication lag:
          {{ pg_lag_bytes.stdout | int | human_readable }}"

    - name: "Pre-Check error. Please try again later"
      fail:
        msg: High replication lag on the Patroni Cluster, please try again later.
  when:
    - pg_lag_bytes.stdout is defined
    - pg_lag_bytes.stdout|int >= max_replication_lag_bytes|int

- name: '[Pre-Check] Make sure there are no long-running transactions (more than {{ max_transaction_sec }} seconds)'
  command: >-
    psql -tAXc "select pid, usename, client_addr, clock_timestamp() - xact_start as xact_age,
      state, wait_event_type ||':'|| wait_event as wait_events,
      left(regexp_replace(query, E'[ \\t\\n\\r]+', ' ', 'g'),100) as query
      from pg_stat_activity
      where clock_timestamp() - xact_start > '{{ max_transaction_sec }} seconds'::interval
      and backend_type = 'client backend' and pid <> pg_backend_pid()
      order by xact_age desc limit 10"
  register: pg_long_transactions
  changed_when: false
  failed_when: false
  until: pg_long_transactions.stdout | length < 1
  retries: 30
  delay: 2

# Stop, if long-running transactions detected
- block:
    - name: "Print long-running (>{{ max_transaction_sec }}s) transactions"
      debug:
        msg: "{{ pg_long_transactions.stdout_lines }}"

    - name: "Pre-Check error. Please try again later"
      fail:
        msg: long-running transactions detected (more than {{ max_transaction_sec }} seconds), please try again later.
  when:
    - pg_long_transactions.stdout is defined
    - pg_long_transactions.stdout | length > 0

# SSH Keys (required for upgrade replicas with rsync)
- name: '[Pre-Check] Make sure that SSH key-based authentication is configured between cluster nodes'
  include_tasks: ssh-keys.yml
  vars:
    ssh_key_user: postgres

# Rsync Checks
- name: '[Pre-Check] Make sure that the rsync package are installed'
  become: true
  become_user: root
  package:
    name: rsync
    state: present

- name: '[Pre-Check] Rsync Checks: create testrsync file on Primary'
  become: true
  become_user: postgres
  file:
    path: /tmp/testrsync
    state: touch
  when:
    - inventory_hostname in groups['primary']

- name: '[Pre-Check] Rsync Checks: test rsync and ssh key access'
  become: true
  become_user: postgres
  shell: >
    rsync -e "ssh -o StrictHostKeyChecking=no" --archive --delete --hard-links --size-only --no-inc-recursive --omit-dir-times
    /tmp/testrsync {{ item }}:/tmp/
  args:
    executable: /bin/bash
  loop: "{{ groups.secondary | list }}"
  when:
    - inventory_hostname in groups['primary']

- name: "(TARGET) Cleanup testrsync file"
  become: true
  become_user: postgres
  file:
    path: /tmp/testrsync
    state: absent

...
