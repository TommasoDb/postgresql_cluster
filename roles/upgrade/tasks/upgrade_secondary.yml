---
# Upgrade with rsync (hard-links)

- name: Make sure that the new data directory "{{ pg_new_datadir }}" are empty on the Replica
  file:
    path: "{{ pg_new_datadir }}"
    state: "{{ item }}"
    mode: 0700
    group: postgres
    owner: postgres
  loop:
    - absent
    - directory
  when:
    - inventory_hostname in groups['secondary']

# If the source and target directories are inside versioned directories
# (example: /pgdata/<pg_old_version>/main -> /pgdata/<pg_new_version>/main)
- name: "Upgrade the PostgreSQL on the Replica (using rsync --hard-links)"
  become: true
  become_user: postgres
  shell: >
    rsync -e "ssh -o StrictHostKeyChecking=no" --archive --delete --hard-links --size-only --no-inc-recursive --verbose
    {{ pg_upper_datadir }}/{{ pg_old_version }} {{ pg_upper_datadir }}/{{ pg_new_version }} {{ item }}:{{ pg_upper_datadir }}
  args:
    executable: /bin/bash
  register: rsync_result
  loop: "{{ groups.secondary | list }}"
  when:
    - inventory_hostname in groups['primary']
    - pg_old_datadir|dirname == pg_upper_datadir + '/' + pg_old_version
    - pg_new_datadir|dirname == pg_upper_datadir + '/' + pg_new_version

# If the source and target directories are non-versioned directories
# (example: /pgdata/main -> /pgdata/main<pg_new_version>)
- name: "Upgrade the PostgreSQL on the Replica (using rsync --hard-links)"
  become: true
  become_user: postgres
  shell: >
    rsync -e "ssh -o StrictHostKeyChecking=no" --archive --delete --hard-links --size-only --no-inc-recursive --verbose
    {{ pg_old_datadir }} {{ pg_new_datadir }} {{ item }}:{{ pg_upper_datadir }}
  args:
    executable: /bin/bash
  register: rsync_result
  loop: "{{ groups.secondary | list }}"
  when:
    - inventory_hostname in groups['primary']
    - pg_old_datadir|dirname != pg_upper_datadir + '/' + pg_old_version
    - pg_new_datadir|dirname != pg_upper_datadir + '/' + pg_new_version

- name: Print the result of the rsync
  debug:
    var: rsync_result
  when:
    - inventory_hostname in groups['primary']

...
