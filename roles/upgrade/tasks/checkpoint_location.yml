---
# This playbook performs several tasks related to PostgreSQL's "Latest checkpoint location":
# 1. Retrieves the value from the cluster leader and its replicas.
# 2. Debugs this value for both leader and replicas.
# 3. Determines if the values match across the leader and replicas, setting 'pg_checkpoint_location_match' accordingly.
# 4. If the values match across all nodes, a success message is displayed.
# 5. If there's a mismatch, the playbook starts patroni and terminates execution with an error message.

- name: Get 'Latest checkpoint location' on the Leader
  shell: |
    set -o pipefail;
    {{ pg_old_bindir }}/pg_controldata {{ pg_old_datadir }} | grep 'Latest checkpoint location' | awk '{print $4}'
  args:
    executable: /bin/bash
  changed_when: false
  register: pg_checkpoint_location_leader
  when:
    - inventory_hostname in groups['primary']

- name: Get 'Latest checkpoint location' on the Replicas
  shell: |
    set -o pipefail;
    {{ pg_old_bindir }}/pg_controldata {{ pg_old_datadir }} | grep 'Latest checkpoint location' | awk '{print $4}'
  args:
    executable: /bin/bash
  changed_when: false
  register: pg_checkpoint_location_replica
  when:
    - inventory_hostname in groups['secondary']

- name: Print 'Latest checkpoint location' for the Leader
  debug:
    msg: "Leader's latest checkpoint location: {{ pg_checkpoint_location_leader.stdout }}"
  when:
    - inventory_hostname in groups['primary']

- name: Print 'Latest checkpoint location' for the Replica
  debug:
    msg: "Replica: {{ inventory_hostname }}, latest checkpoint location: {{ pg_checkpoint_location_replica.stdout }}"
  when:
    - inventory_hostname in groups['secondary']

- name: Check if all 'Latest checkpoint location' values match
  set_fact:
    pg_checkpoint_location_match: "{{ pg_checkpoint_location_replica.stdout == hostvars[groups['primary'][0]]['pg_checkpoint_location_leader']['stdout'] }}"
  when:
    - inventory_hostname in groups['secondary']

- name: "SUCCESS: 'Latest checkpoint location' values match on all cluster nodes"
  debug:
    msg: "'Latest checkpoint location' is the same on the leader and its standbys"
  run_once: true
  when:
    # This condition retrieves the 'pg_checkpoint_location_match' value for each node in the 'secondary' group.
    # The 'select' filter selects all nodes whose 'pg_checkpoint_location_match' is 'False'.
    # If no such nodes exist (i.e., the length of the resulting list is less than 1), it means that the 'pg_checkpoint_location_match' is 'True' for all nodes.
    - groups['secondary'] | map('extract', hostvars, 'pg_checkpoint_location_match') | select('equalto', False) | list | length < 1

# Stop, if 'Latest checkpoint location' doesn't match
- block:
    - name: "'Latest checkpoint location' doesn't match"
      debug:
        msg: "'Latest checkpoint location' doesn't match on leader and its standbys"
      run_once: true

    # rollback (TODO)
#    - name: Perform rollback
#      include_tasks: rollback.yml

    - name: "ERROR: 'Latest checkpoint location' doesn't match"
      fail:
        msg: "'Latest checkpoint location' doesn't match on leader and its standbys. Please try again later"
      run_once: true
  when:
    # This condition retrieves the 'pg_checkpoint_location_match' value for each node in the 'secondary' group.
    # The 'select' filter selects all nodes whose 'pg_checkpoint_location_match' is 'False'.
    # If there is at least one such node (i.e., the length of the resulting list is greater than 0),
    # it means that the 'pg_checkpoint_location_match' is not 'True' for all nodes,
    # and the block of tasks is executed, including cleanup and throwing an error.
    - groups['secondary'] | map('extract', hostvars, 'pg_checkpoint_location_match') | select('equalto', False) | list | length > 0

...
