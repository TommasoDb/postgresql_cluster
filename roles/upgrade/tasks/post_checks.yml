---

- name: Make sure that physical replication is active
  command: >-
    psql -tAXc "select count(*) from pg_stat_replication
    where application_name != 'pg_basebackup'"
  register: pg_replication_state
  until: pg_replication_state.stdout | int > 0
  retries: 30  # max wait time: 1 minute
  delay: 2
  changed_when: false
  failed_when: false
  when:
    - inventory_hostname in groups['primary']

# Error, if no active replication connections found.
- name: "Post-Check error. No active replication connections found."
  debug:
    msg:
      - "No active replication connections found."
      - "Please check the replication status and PostgreSQL logs."
  failed_when: pg_replication_state.stdout | int == 0
  ignore_errors: true  # show the error and continue the playbook execution
  when:
    - inventory_hostname in groups['primary']
    - pg_replication_state.stdout | int == 0

- name: Create a table "test_replication" with 10000 rows on the Primary
  command: >-
    psql -tAXc "drop table IF EXISTS test_replication;
    create table test_replication as select generate_series(1, 10000)"
  when:
    - inventory_hostname in groups['primary']

- name: Wait until the PostgreSQL replica is synchronized
  command: >-
    psql -tAXc "select count(*) from test_replication"
  register: count_test
  until: count_test.stdout | int == 10000
  retries: 60  # max wait time: 2 minutes
  delay: 2
  changed_when: false
  failed_when: false
  when:
    - inventory_hostname in groups['secondary']

- name: Print the result of checking the number of records
  run_once: true
  debug:
    msg:
      - "The number of records in the test_replication table the same as the Primary ({{ count_test.stdout }} rows)"
      - "The PostgreSQL Replication is Ok."
  when:
    - inventory_hostname in groups['secondary']
    - count_test.stdout | int == 10000

# Error, if the number of records in the "test_replication" table does not match the Primary.
- name: "Post-Check error. The number of records does not match"
  debug:
    msg:
      - "The number of records in the test_replication table does not match the Primary ({{ count_test.stdout }} rows)."
      - "Please check the replication status and PostgreSQL logs."
  failed_when: count_test.stdout | int != 10000
  ignore_errors: true  # show the error and continue the playbook execution
  when:
    - inventory_hostname in groups['secondary']
    - count_test.stdout | int != 10000

- name: Drop a table "test_replication"
  command: >-
    psql -tAXc "drop table IF EXISTS test_replication"
  when:
    - inventory_hostname in groups['primary']

...
