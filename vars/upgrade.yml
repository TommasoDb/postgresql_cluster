---
# Variables for the upgrade_postgres.yml playbook

# Note:
# There is no need to plan additional disk space, because when updating PostgreSQL, hard links are used instead of copying files.
# However, it is required that the pg_old_datadir and pg_new_datadir are located within the same top-level directory (pg_upper_datadir).
# https://www.postgresql.org/docs/current/pgupgrade.html

pg_old_version: ""  # specify the current (old) version of PostgreSQL
pg_new_version: ""  # specify the new version of PostgreSQL

# Adjust these variables if the paths are different from the default value.
pg_old_bindir: "{{ postgresql_bin_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_old_version) }}"
pg_old_datadir: "{{ postgresql_data_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_old_version) }}"
pg_old_confdir: "{{ postgresql_conf_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_old_version) }}"

pg_new_bindir: "{{ postgresql_bin_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_new_version) }}"
pg_new_datadir: "{{ postgresql_data_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_new_version) }}"
pg_new_confdir: "{{ postgresql_conf_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_new_version) }}"
# custom WAL dir path (symlink will be created) [optional]
pg_new_wal_dir: "{{ postgresql_wal_dir | regex_replace('(/$)','') | regex_replace(postgresql_version, pg_new_version) }}"

# pg_upper_datadir: Specifies the top-level directory containing both old and new PostgreSQL data directories.
# The variable is derived from pg_new_datadir by removing any trailing slash and getting its grandparent directory.
# Adjust if the data directory location differs from the default.
# Example: /var/lib/postgresql, /var/lib/pgsql, /pgdata
pg_upper_datadir: "{{ pg_new_datadir | regex_replace('/$', '') | dirname | dirname }}"

# Automatically update the package versions in the postgresql_packages variable
pg_new_packages: "{{ postgresql_packages | regex_replace(postgresql_version, pg_new_version) }}"

# Alternatively, you can explicitly specify the list of new packages to install.
# This gives you more control and should be used if the automatic update does not meet your needs.
# Uncomment and modify the following lines according to your requirements. Example:
# pg_new_packages:
#  - postgresql-{{ pg_new_version }}
#  - postgresql-client-{{ pg_new_version }}
#  - postgresql-server-dev-{{ pg_new_version }}
#  - postgresql-contrib-{{ pg_new_version }}
#  - postgresql-{{ pg_new_version }}-repack"

pg_old_packages_remove: true  # remove old postgresql packages after upgrade

pg_start_stop_timeout: 1800  # 30 minutes
patroni_config_file: /etc/patroni/patroni.yml

schema_compatibility_check: true  # if 'true', before the upgrade, check the compatibility of the database schema with the new PostgreSQL
schema_compatibility_check_timeout: 3600  # seconds. The maximum check duration (pg_dumpall --schema-only)
vacuumdb_analyze_timeout: 3600  # seconds. The maximum duration of analyze command (soft limit, exceeding won't halt playbook)
update_extensions: true  # if 'true', try to update extensions automatically

# Do not perform an upgrade if
max_replication_lag_bytes: 10485760  # 10 MiB - Maximum allowed replication lag in bytes
max_transaction_sec: 15  # Maximum allowed duration for a transactions in seconds

...
